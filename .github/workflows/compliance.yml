name: Compliance

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday at midnight UTC
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - run: corepack enable && corepack prepare pnpm@10.15.1 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "## License Compliance Report" > license-report.md
          echo "" >> license-report.md
          
          # Install license checker
          pnpm add -D license-checker
          
          # Generate license report
          npx license-checker --summary --json > licenses.json
          
          # Parse and categorize
          node -e "
          const fs = require('fs');
          const licenses = JSON.parse(fs.readFileSync('licenses.json', 'utf8'));
          
          const approved = ['MIT', 'Apache-2.0', 'BSD-2-Clause', 'BSD-3-Clause', 'ISC', 'CC0-1.0'];
          const flagged = [];
          const report = [];
          
          for (const [pkg, info] of Object.entries(licenses)) {
            const license = info.licenses || 'UNKNOWN';
            if (!approved.includes(license)) {
              flagged.push({ pkg, license });
            }
          }
          
          if (flagged.length > 0) {
            console.log('### ⚠️ Flagged Licenses');
            console.log('');
            console.log('The following packages use licenses that may require review:');
            console.log('');
            flagged.forEach(f => {
              console.log('- **' + f.pkg + '**: ' + f.license);
            });
            process.exit(1);
          } else {
            console.log('### ✅ All licenses approved');
            console.log('');
            console.log('All dependencies use approved open-source licenses.');
          }
          " | tee -a license-report.md

      - name: Upload license report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: |
            license-report.md
            licenses.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-3.0

  sbom-generation:
    name: Generate SBOM (Software Bill of Materials)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node & pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - run: corepack enable && corepack prepare pnpm@10.15.1 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate SBOM (CycloneDX)
        run: |
          pnpm add -D @cyclonedx/cyclonedx-npm
          npx @cyclonedx/cyclonedx-npm --output-file sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 90

      - name: Attach SBOM to release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "SBOM generated and available as artifact"

  audit-log:
    name: Audit Deployment Log
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Create audit entry
        run: |
          mkdir -p .audit
          cat > .audit/deploy-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "ref": "${{ github.ref }}",
            "event": "${{ github.event_name }}",
            "run_id": "${{ github.run_id }}",
            "run_number": "${{ github.run_number }}"
          }
          EOF

      - name: Commit audit log
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .audit/
          git diff --staged --quiet || git commit -m "audit: deployment at $(date -u +%Y-%m-%dT%H:%M:%SZ) [skip ci]"
          git push || true

  policy-check:
    name: Policy Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Check CI/CD policies
        run: |
          echo "## Policy Compliance Check" > policy-report.md
          echo "" >> policy-report.md
          
          # Check 1: All changes via PR
          echo "### GitHub-Only Changes Policy" >> policy-report.md
          if [ -f ".github/CODEOWNERS" ]; then
            echo "✅ CODEOWNERS file exists" >> policy-report.md
          else
            echo "⚠️ CODEOWNERS file missing" >> policy-report.md
          fi
          
          # Check 2: Required workflows exist
          echo "" >> policy-report.md
          echo "### Required Workflows" >> policy-report.md
          required_workflows=("ci.yml" "deploy.yml" "security.yml")
          for workflow in "${required_workflows[@]}"; do
            if [ -f ".github/workflows/$workflow" ]; then
              echo "✅ $workflow exists" >> policy-report.md
            else
              echo "❌ $workflow missing" >> policy-report.md
            fi
          done
          
          # Check 3: Documentation requirements
          echo "" >> policy-report.md
          echo "### Documentation Requirements" >> policy-report.md
          if [ -f "docs/OPS.md" ]; then
            echo "✅ OPS.md exists" >> policy-report.md
          else
            echo "❌ OPS.md missing" >> policy-report.md
          fi
          
          cat policy-report.md

      - name: Upload policy report
        uses: actions/upload-artifact@v4
        with:
          name: policy-report
          path: policy-report.md
          retention-days: 30
